#include <stdio.h>
#include <stdlib.h>

#define MAXN 100 
#define MAXEQ 1000000

int compare(const void *va, const void *vb);
int upperBound(int lo, int hi, int searchSpace[], int target);
int lowerBound(int lo, int hi, int searchSpace[], int target);

int main()
{
    int N;
    int S[MAXN], leftEq[MAXEQ], rightEq[MAXEQ];
    int i, x, y, z, lc, rc, sols, hi, lo;

    scanf("%d", &N);
    
    for(i=0; i<N; i++)
	scanf("%d", &S[i]);
    
    // ((a*b+c)/d)-e=f  <=>  a*b+c=d*(f+e)
    // calc left & right side equation results
    lc = rc = 0;
    for(x=0; x<N; x++)
	for(y=0; y<N; y++)
	    for(z=0; z<N; z++)
	    {
		leftEq[lc++] = S[x]*S[y]+S[z];
		if(S[x]!=0) // d<>0 (problem statement)
		    rightEq[rc++] = S[x]*(S[y]+S[z]);
	    }

    qsort(rightEq, rc, sizeof(int), compare);

    for(i=0; i<rc; i++)
	printf("%d ", rightEq[i]);
    putchar('\n');

    // search for left side results in
    // the sorted right side results's array
    sols=0;
    for(i=0; i<lc; i++) {
	printf("Searching for: %d\n", leftEq[i]);
	hi = upperBound(0, rc-1, rightEq, leftEq[i]);
	printf("upper bound: %d\n", hi);
	lo = lowerBound(0, rc-1, rightEq, leftEq[i]);
	printf("lower bound: %d\n", lo);
	sols += (hi-lo);
    }

    printf("%d\n", sols);
    return 0;
}

int compare(const void *va, const void *vb)
{
    return (*(const int*)va - *(const int*)vb);
}

int upperBound(int lo, int hi, int searchSpace[], int target)
{
    while(lo<hi)
    {
	int mid = lo+(hi-lo)/2;

	if(target < searchSpace[mid])
	    hi = mid;
	else
	    lo = mid+1;
    }

    return lo;
}

int lowerBound(int lo, int hi, int searchSpace[], int target)
{
    while(lo<hi)
    {
	int mid = lo+(hi-lo)/2;
	
	if(target > searchSpace[mid])
	    lo = mid+1;
	else
	    hi = mid;
    }

    return lo;
}
